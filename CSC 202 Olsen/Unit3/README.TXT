
 * November 11,2016
            *
                * + --> cancatination
                            *adds the statement after it to the thing before it.
                            *sticks 2 things together 
                            *OR adds 2 numbers together
                            *overloaded with things it can do
                *
                * = -->
                            * assigns somthing to a name LIKE INT
                            * HAVE TO KNOW IF POSITIVE OR NEGITIVE
                            * 
               *Int 
                            * Integer
               *
               *< (less than)
               *>(Greater than)
               *==
               *
               *
               *
            * *Printing Integers
                *   System.out.println("ANYTHING CAN GO HERE");\
                            *this prints the words out onto the screen
                            *built in java method
                            *
                * System.out.println("SENTANCE HERE:" + 5);
                            *
                *Inter Variables
                            *Declare: int ____ = #
                            *
                            *when put in a system out line the ___ (name) is called but the number is put in
                            *
                            *int number = 33;
                            *
                            *System.out.println("This number is one I hold dear to my heart,
                                        that number is: " + number);
                                        
                                         * VariableName = ___;
                                         
                            * that = assigns the ___ to the VARIABLE and when it is called it used that ___
        
                * 
 * 
 * November 3, 2016
            * import java.til.Scanner;
                    * 
            *System.in
                    * User imputs somthing 
                    * put inside  --> Scanner stan = new Scanner(System.in);
                    * records user imputted characters
            *System.out
                    *Outputs words
            *
            *
            *Scanners
                    *look at System.in and interperate the characters typed as things.
                    *Example: numbers, strings
            *
            *
            *
            *
 * 11/10/16
            * Fields (Instance Variables)
                    *\/\/\/\/\/\/ THAT IS A FIELD\/\/\/\/\/\/
                    *What information does  ______ need to know?
                    *Answer: Starting point
                    *        Where it is
                    * Field that stores where the snail started
                                * private int its[name] <----- Declare 
                                *FIELDS ARE ALWAYS PRIVATE
            *
            *Constructor
                    *used to initalize fields
                    *Special kind of method. 
                    *Example of a constructor
                            *
                                 * Constrictor
                                 * Creates a new snail ( i.e initialize all snail fields)
                                 * @param start tells where the snail startss
                                
                                
                                public Snail(int start) 
                                {
                                    
                                    //purpous is to initialize all fields
                                    itsStart = start
                                    itsLocation = start
                                    
                                }
            *
            *int class = returns integer
            * boolean class = returns true or false
            * void class = action
            *_____++ means adding one 
 * 
 * November 15, 2016
         * @param
                 * variable put in when application c;ass
                 * 
         * EQUALS
                 *   EQUALSEQUALS means when ____ is _____
                 * EQUALS is an assignment
         * <, >, !
         * <= OR >= (Less than/Greater than OR equal to// Greater/less equals)
